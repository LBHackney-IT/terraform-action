name: Terraform AWS Action

inputs:
  backend_config:
    description: Location of the terraform config file, including filename
    required: true
  vars_file:
    description: Location of the TFVars file, including filename
    required: true
  aws_access_key: 
    description: AWS access key
    required: True
  aws_secret_key:
    description: AWS secret key
    required: True
  aws_region:
    description: Region to assume role with
    required: false
    default: eu-west-2
  plan_only:
    description: true if a plan is the only intended action
    type: boolean
    default: false
  github_token:    
    description: GitHub token for updating pull requests with plan output
    required: false
  role_arn:
    description: Full ARN of role to assume
    required: true
  checkov_dir:
    description: Directory to run checkov checks against
    required: false
    default: '.'

runs:
  using: "composite"
  steps:
    - name: print
      run: echo  fromJSON( ${{ github.event.inputs.plan_only}} )
      shell: bash 

    - name: Test with Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ inputs.checkov_dir }}
        framework: terraform
        check: MEDIUM

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ inputs.role_arn }}
        aws-region: ${{ inputs.aws_region }}
        aws-access-key-id: ${{ inputs.aws_access_key }}
        aws-secret-access-key: ${{ inputs.aws_secret_key }}
        role-skip-session-tagging: true

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

  # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      shell: bash

  # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config='${{ inputs.backend_config }}'
      shell: bash

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      shell: bash

  # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: terraform plan -var-file='${{ inputs.vars_file }}'
      continue-on-error: true
      shell: bash

  # Updates PRs with Plan status if a github token is present
    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && inputs.github_token
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
            
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      shell: bash

    - name: Terraform Apply
      if: fromJSON(github.event.inputs.plan_only) == false && github.event_name == 'push' || fromJSON(github.event.inputs.plan_only) == false && github.ref_type == 'tag' 
      run: terraform apply -auto-approve -var-file='${{ inputs.vars_file }}'
      shell: bash
